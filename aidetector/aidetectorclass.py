"""
This contains the class for the AI Detector.

"""

from torch import nn

class AiDetector(nn.Module):
    """
    AiDetector is a PyTorch model for detecting whether a text was generated by an AI.

    Attributes
    ----------
    embedding : nn.Embedding
        The embedding layer of the model.
    conv : nn.Conv1d
        The convolutional layer of the model.
    pool : nn.MaxPool1d
        The max pooling layer of the model.
    global_pool : nn.AdaptiveMaxPool1d
        The adaptive max pooling layer of the model.
    initrange : float
        The initial range for weight initialization.
    conv_output_size : int
        The output size from the convolutional layers is the number of filters.
    fc : nn.Linear
        The fully connected layer of the model.
    """
        
    def __init__(self, vocab_size, embed_dim=50, num_class=1):
        """
        Constructs all the necessary attributes for the AiDetector object.

        Parameters
        ----------
        vocab_size : int
            The size of the vocabulary.
        embed_dim : int, optional
            The dimension of the embeddings (default is 50).
        num_class : int, optional
            The number of classes (default is 1).
        """
        
        super(AiDetector, self).__init__()
        self.embedding = nn.Embedding(vocab_size, embed_dim, sparse=False)

        self.conv = nn.Conv1d(embed_dim, 128, kernel_size=5, stride=1)
        self.pool = nn.MaxPool1d(kernel_size=5)
        self.global_pool = nn.AdaptiveMaxPool1d(1)
        self.initrange = 0.5

        # The output size from the convolutional layers is the number of filters
        self.conv_output_size = 128

        # Add the fully connected layer here
        self.fc = nn.Linear(self.conv_output_size, num_class)
        self.fc.weight.data.uniform_(-self.initrange, self.initrange)
        self.fc.bias.data.zero_()

        self.init_weights()

    def init_weights(self):
        """
        Initializes the weights of the model's embedding layer.

        Returns
        -------
        None
        """
        initrange = 0.5
        self.embedding.weight.data.uniform_(-initrange, initrange)

    def forward(self, text):
        """
        Defines the computation performed at every call.

        Parameters
        ----------
        text : Tensor
            The input text tensor.

        Returns
        -------
        output : Tensor
            The output of the model.
        """
        embedded = self.embedding(text)
        conv_out = self.conv(embedded.permute(0, 2, 1))
        pooled = self.pool(conv_out)
        pooled = self.global_pool(pooled)
        pooled = pooled.view(pooled.size(0), -1)

        # Use the fully connected layer to produce the final output
        output = self.fc(pooled)
        return output

    def add_fc_layer(self, num_class=1):
        """
        Adds a new fully connected layer to the model.

        Parameters
        ----------
        num_class : int, optional
            The number of classes (default is 1).

        Returns
        -------
        None
        """
        self.fc = nn.Linear(self.conv_output_size, num_class)
        self.fc.weight.data.uniform_(-self.initrange, self.initrange)
        self.fc.bias.data.zero_()